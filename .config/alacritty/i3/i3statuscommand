
#!/bin/sh

dte() {
    date +"%a, %b %d %R"
}

hdd() {
    df -h /home | grep dev | awk '{print$3, " " $5}'
}

mem() {
    free -h | awk '/Mem:/ {printf $3 " / " $2}'
}

cpu() {
    read cpu a b c previdle rest < /proc/stat
    prevtotal=$((a+b+c+previdle))
    sleep 0.5
    read cpu a b c idle rest < /proc/stat
    total=$((a+b+c+idle))
    cpu=$((100*( (total-prevtotal) - (idle-previdle) ) / (total-prevtotal) ))
    echo " CPU: $cpu% "
}

pkgs() {
    pacman -Qe | wc -l
}

upgrades() {
    pacman -Qu | wc -l
}

vpn() {
    ip a | grep tun0 | grep inet | wc -l
}

vol() {
    volume=$(pactl get-sink-volume @DEFAULT_SINK@ | grep -oP '\d+%' | head -n 1)
    echo "Volume: $volume"
}

kernel() {
    uname -sr | sed "s/-amd64//g"
}

network() {
    conntype=$(ip route | awk '/default/ { print substr($5,1,1) }')

    if [ -z "$conntype" ]; then
        echo "  down"
    elif [ "$conntype" = "e" ]; then
        echo "  up"
    elif [ "$conntype" = "w" ]; then
        echo "  up"
    fi
}

usbmon() {
    usb1=$(lsblk -la | awk '/sdc1/ { print $1 }')
    usb1mounted=$(lsblk -la | awk '/sdc1/ { print $7 }')

    if [ "$usb1" ]; then
        if [ -z "$usb1mounted" ]; then
            echo " |"
        else
            echo " $usb1 |"
        fi
    fi
}

weather() {
    sed 20q ~/.config/weather.txt | grep value | awk '{print $2 $3}' | sed 's/"//g'
}

temp() {
    grep temp_F ~/.config/weather.txt | awk '{print $2}' | sed 's/"//g' | sed 's/,/ F/g'
}

bat() {
    battery="$(cat /sys/class/power_supply/BAT0/capacity)"
    echo "Battery: $battery% "
}

batstat() {
    cat /sys/class/power_supply/BAT0/status
}

net() {
    update() {
        sum=0
        for arg; do
            read -r i < "$arg"
            sum=$(( sum + i ))
        done
        cache=/tmp/${1##*/}
        [ -f "$cache" ] && read -r old < "$cache" || old=0
        printf %d\\n "$sum" > "$cache"
        printf %d\\n $(( sum - old ))
    }

    rx=$(update /sys/class/net/[ew]*/statistics/rx_bytes)
    tx=$(update /sys/class/net/[ew]*/statistics/tx_bytes)
    rx=$((rx * 10))
    tx=$((tx * 10))

    rx=$((rx / 16))
    tx=$((tx / 16))

     # echo " $rx  $tx"
    echo " $(numfmt --to=si $rx)  $(numfmt --to=si $tx)"
}

# status() {
#     echo "$(cpu) | $(mem) | $(net) | $(vol) | $(bat)$(batstat) |  $(dte)"
# }

status() {
    echo "$(cpu) | $(mem) | $(net) | $(vol) | $(bat)$(batstat) | $(dte)"
}

while true; do
    echo "$(status)"
    sleep 1  # Update status every second
done
